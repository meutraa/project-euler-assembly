%include "print.asm"
%include "exit.asm"

%define length 999

section .data
    array: db "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"

section .bss
    buf resq 13

section .text
    global _start

_start:
    mov rsi, array
    mov rdi, length
    mov r13, 13

.zero:
    xor rcx, rcx
    mov rbx, 1

.next:
    dec rdi
    jz _end	; jump if not last byte

    xor rax, rax
    lodsb	; load next byte

    cmp rax, 48	; restart buffer if zero
    je .zero

    sub rax, 48
    mov r11, rax	; save digit
    inc rcx
    cmp rcx, 12
    ja .skip
    mov [buf + rcx], r11	; skip saving if out of bounds

.skip:
    mul rbx
    mov rbx, rax

    cmp rcx, 12	; next if buffer not full
    jbe .next

    ; get buf%13 for buffer index
    
    xor rdx, rdx
    mov rax, rcx
    div r13
    mov r15, rdx	; save remainder

    xor rdx, rdx
    mov rax, rbx	; load product

    xor rbx, rbx
    mov rbx, qword [buf + 0]
    mov rbx, r11
    div qword [buf + r15]
    
    mov rbx, rax	; store result


    mov qword [buf + r15], r11 ; store last digit
    cmp rbx, r9
    cmova r9, rbx	; store record
    jmp .next
    
_end:
    call r9
    call _exit
